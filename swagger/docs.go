// Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/events": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Create Event areas with request body",
                "parameters": [
                    {
                        "description": "RequestBody",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/feeds/areas": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Get Feed areas with query strings",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Sw Lat",
                        "name": "sw_lat",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Sw Lng",
                        "name": "sw_lng",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Ne Lat",
                        "name": "ne_lat",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Ne Lng",
                        "name": "ne_lng",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Timestamp",
                        "name": "time_stamp",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reason",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/feeds.Result"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Update feed locations with correct address and location",
                "parameters": [
                    {
                        "description": "RequestBody",
                        "name": "UpdateFeedLocationsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/feeds.UpdateFeedLocationsRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/feeds/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Get Feeds with given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Feed Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/feeds.Feed"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/needs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Need"
                ],
                "summary": "Get Needs",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Is Only Not Resolved",
                        "name": "only_not_resolved",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/needs.Response"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Need"
                ],
                "summary": "Create Need",
                "parameters": [
                    {
                        "description": "RequestBody",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/needs.CreateNeedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/needs.LiteNeed"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "feeds.Feed": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "epoch": {
                    "type": "integer"
                },
                "extra_parameters": {
                    "type": "string"
                },
                "formatted_address": {
                    "type": "string"
                },
                "full_text": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "reason": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "feeds.FeedLocation": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "entry_id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "feeds.Result": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "entry_id": {
                    "type": "integer"
                },
                "epoch": {
                    "type": "integer"
                },
                "extra_parameters": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "loc": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "reason": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "feeds.UpdateFeedLocationsRequest": {
            "type": "object",
            "properties": {
                "feed_locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/feeds.FeedLocation"
                    }
                }
            }
        },
        "handler.RawFeed": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "epoch": {
                    "type": "integer"
                },
                "extra_parameters": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "raw_text": {
                    "type": "string"
                }
            }
        },
        "handler.request": {
            "type": "object",
            "properties": {
                "feeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.RawFeed"
                    }
                }
            }
        },
        "needs.CreateNeedRequest": {
            "type": "object",
            "required": [
                "address",
                "description"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "needs.LiteNeed": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "needs.Need": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "extra_parameters": {
                    "type": "string"
                },
                "formatted_address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "loc": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "needs.Response": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/needs.Need"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "IT Afet Yardım",
	Description:      "Afet Harita API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
